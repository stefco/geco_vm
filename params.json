{
  "name": "Geco vm",
  "tagline": "All the tools you need to work with LIGO, always up-to-date, in one easy Vagrant box.",
  "body": "# GECo Virtual Machine\r\n\r\n## Quick Start\r\n\r\nTo get going quickly:\r\n\r\n 1. Install [VirtualBox](https://www.virtualbox.org/wiki/Downloads) and\r\n    [Vagrant](https://www.vagrantup.com/downloads.html).\r\n 2. Download the GECo VM \r\n    [Vagrantfile](https://github.com/stefco/geco_vm/raw/master/vagrantfiles/ubuntu-12.04-gui/Vagrantfile)\r\n    and save it in the directory where you plan do do your work.\r\n 3. Open a terminal, change to the directory where you saved your Vagrantfile,\r\n    and run `vagrant up` to download and start the machine. A window with the\r\n    virtual machine's desktop should pop up. Run `vagrant halt` while in that\r\n    same directory to shut the machine down.\r\n 4. Either log into the desktop interface (it should log in automatically, but\r\n for reference, both password and username are \"vagrant\") or log in via ssh by\r\n    running `vagrant ssh` on your host computer while in the Vagrantfile\r\n    directory.\r\n\r\nThat's it! See more instructions and tips below.\r\n\r\n## Contents\r\n\r\n  - [Quick Start](#quick-start)\r\n  - [Contents](#contents)\r\n  - [Introduction](#introduction)\r\n  - [Using the Virtual Machine](#using-the-virtual-machine)\r\n      - [GUI vs. No-GUI](gui-vs-no-gui)\r\n      - [Installing and Getting Started](#installing-and-getting-started)\r\n      - [Updating to the Latest Version of the VM](#updating-to-the-latest-version-of-the-vm)\r\n  - [Pro Tips](#pro-tips)\r\n  - [Developing the Base Image](#developing-the-base-image)\r\n  - [Acknowledgements](#acknowledgements)\r\n  - [More information on Vagrant](#more-information-on-vagrant)\r\n  - [To Do](#to-do)\r\n\r\n## Introduction\r\n\r\nThis is a virtual machine with all important LIGO-related software\r\npre-installed.\r\n\r\nI am building this because dealing with LIGO's toolkit dependencies is a hassle\r\nand, for researchers who just need to get going with their work, a waste of\r\ntime. Doing any work at remotely is a difficult proposition (unless you are\r\n`ssh`ed into a LIGO server, which is sometimes impossible or undesirable, and\r\nin any case requires credentials and its own special software for anything\r\nbesides SSH), and setup instructions are not uniform across OSes. [My\r\ngroup](http://geco.markalab.org) at Columbia University is currently using this\r\nVirtual Machine to avoid all of these issues, but I imagine we are not the only\r\nones who have encountered these hurdles, so I hope that other labs might find\r\nthis useful.\r\n\r\n## Using the Virtual Machine\r\n\r\n### GUI vs. No-GUI\r\n\r\n**There are two versions of `geco-vm`:** one _with_ a GUI (graphical user\r\ninterface) and one without. The GUI version is called `geco-vm-gui`; it is the\r\nmore beginner-friendly version. It is more resource intensive, however, and is\r\nonly available for desktop (not server) use. If you know what you are doing and\r\nprefer working from the command line anyway, or if performance and resource\r\nusage are important considerations, you should use the headless (i.e.\r\nGUI-free), lightweight `geco-vm`; otherwise, `geco-vm-gui` has all the same\r\ncapabilities but comes with a familiar desktop interface and nice features like\r\nshared clipboard (you can copy text within the virtual machine and paste it in\r\nyour host computer, and vice versa) and drag-and-drop file movement (this\r\nfeature only works for dragging files into the VM). See the [Pro\r\nTips](#pro-tips) section below for more information applicable to both GUI and\r\nheadless version.\r\n\r\n### Installing and Getting Started\r\n\r\nIf you just want to _use_ the virtual machine, you can follow these instructions\r\nto get started. These instructions should work on any system.\r\n\r\n 1. Download and install the latest version of [VirtualBox](https://www.virtualbox.org/wiki/Downloads).\r\n 2. Download and install the latest version of [Vagrant](https://www.vagrantup.com/downloads.html)\r\n 3. Download either the\r\n    [GUI Vagrantfile](https://github.com/stefco/geco_vm/raw/master/vagrantfiles/ubuntu-12.04-gui/Vagrantfile)\r\n    or the\r\n    [headless Vagrantfile](https://github.com/stefco/geco_vm/raw/master/vagrantfiles/ubuntu-12.04/Vagrantfile)\r\n    to the folder you want to work in.\r\n 4. Run `vagrant up` to download and boot the virtual machine.\r\n 5. Run `vagrant ssh` to start using the virtual machine; **for the GUI\r\n    version**, you can just use the virtual machine window that\r\n    pops. It should log you in automatically when the VM starts up. For\r\n    reference, the username and password are both \"vagrant\".\r\n\r\nThat's it! Once you are `ssh`ed into the guest machine, it is just like using\r\n`ssh` with any other machine. Similarly, the GUI expriece should be just like\r\nusing any Ubuntu box. While `ssh`ed, you can run `exit` to return to the host\r\nmachine.  While not using the guest machine, you can simply run `vagrant` to\r\nget a short list of available commands for managing this VM.\r\n\r\n### Updating to the Latest Version of the VM\r\n\r\n#### TL;DR:\r\n\r\n```bash\r\nvagrant destroy -f\r\nvagrant box remove -f --all stefco/geco-vm\r\nvagrant up\r\n```\r\n\r\n#### Full Instructions, With Explanation\r\n\r\nIt is easy to make mistakes while upgrading to the latest version of\r\nvagrant if you don't know what you're doing. This can cause you to waste\r\nhours troubleshooting a broken feature that has been fixed on the latest\r\nversion of the box simply because you think you've already upgraded (when\r\nin fact you haven't). Knowing how vagrant works\r\ncan help immensely in avoiding this peculiar debugging hell.\r\n\r\nWhen you initialize your virtual machine with `vagrant up`, vagrant does the\r\nfollowing:\r\n\r\n 1. Checks whether you already have a copy of `stefco/geco-vm` saved in vagrant's\r\n    cache of vagrant boxes\r\n 2. Downloads the latest copy of `stefco/geco-vm` if you do not have a local\r\n    copy; if you **do** have a local copy, **even if it is outdated**, vagrant\r\n    will use that one\r\n 3. Decompresses and copies your local copy of the `stefco/geco-vm` box and\r\n    stores that fresh copy of the virtual machine in the `~/Virtualbox\\ VMs`\r\n    directory; this copy will be the virtual machine you use\r\n 4. Starts up the new machine\r\n 5. Runs any provisioning scripts that you specify\r\n    (which allow you to further customize the box before you use it)\r\n 6. Mounts shared folders\r\n\r\nNote the following:\r\n\r\n  - Simply updating your cached vagrant box to the latest version with\r\n    `vagrant box update` will only update your cached box; **this alone will\r\n    not have any effect on the virtual machine you are already using.**\r\n  - Destroying and recreating your machine using `vagrant destroy -f`\r\n    followed by `vagrant up` will just create a fresh version of the old\r\n    box; you need to make sure you also update the cached\r\n    copy of the vagrant box using `vagrant box update` before you\r\n    reinitialize the virtual machine.\r\n\r\nSo, to make sure you are using the latest and greatest version of `stefco/geco-vm`,\r\nyou should make sure you are in your vagrant working directory on your host\r\nmachine and run:\r\n\r\n```bash\r\nvagrant destroy -f\r\nvagrant box remove -f --all stefco/geco-vm\r\nvagrant up\r\n```\r\n\r\nYou can check on your cached version of this (and all) vagrant boxes by running\r\n`vagrant box list`, and you can see whether you successfully deleted your\r\nrunning copy of the virtual machine by running `vagrant status`.\r\n\r\n## Pro-Tips\r\n\r\n#### Vagrant Best Practices\r\n\r\nYou should think of your virtual machine as disposable; ideally, you should\r\nnot store any information on it long term. Because Vagrant \r\n[automatically shares](https://www.vagrantup.com/docs/getting-started/synced_folders.html)\r\nyour host computer's vagrant folder (i.e. the folder in which your Vagrantfile\r\nis located) with the guest virtual machine under the `/vagrant` directory, it\r\nis trivially easy to keep your work saved on your host machine by keeping it\r\nin the `/vagrant` directory of the guest machine. This way, if you have to\r\ndelete your virtual machine (for example, if you are upgrading to the latest\r\nversion), you can do so without having to worry about lost work.\r\n\r\n#### Adding Custom Scripts\r\n\r\nYou can add custom scripts to your path by putting them in the `/home/vagrant`\r\ndirectory on the host machine. You can also add those scripts to a `bin`\r\nfolder in the directory on your host machine where the `Vagrantfile` is\r\nlocated (since this directory is shared with `geco-vm` through the\r\n`/vagrant` directory).\r\n\r\n#### Previewing Images with iTerm2\r\n\r\nIf you are using a mac with the latest build of\r\n[iTerm2](http://iterm2.com/downloads.html) (something I highly recommend, since\r\niTerm2 is an excellent terminal emulator), you can use `imgcat` to preview\r\nimages on your virtual machine _right in your terminal_ during an\r\nssh session. This is nice for e.g. taking a quick look at a fresh plot\r\nwithout leaving the command line.\r\n\r\n## Developing the Base Image\r\n\r\nThis machine is built and deployed using a tool called Packer, made by the same\r\npeople who make Vagrant. Configuration information for creating a virtual\r\nmachine using [Packer](https://www.packer.io/) can be found on their \r\nwebsite. The important idea, though, is that Packer\r\nuses a template file (in our case, `geco-vm.json`) to specify:\r\n\r\n  - **Builders**, which take an installation disk image (Ubuntu 12.04 LTS\r\n    64-bit, in our case) and make a fresh installation in a new virtual\r\n    machine using the providers of your choice (for us, only VirtualBox, though\r\n    you can get crazy with VMWare, DigitalOcean, Amazon AWS, Docker, etc.)\r\n  - **Provisioners**, which handle file-copying and script running (usually\r\n    runnning a dependency install script, like `provision.sh`, in our case);\r\n    this is the part where you get to customize the box with whatever you need.\r\n  - **Post-Processors**, which package the resulting virtual machine image so\r\n    that it can be used by Vagrant, and which automatically upload the images\r\n    to Atlas (see below).\r\n\r\nAfter installing the latest version of `packer`, there is one step you will\r\nhave to take before you can build the machine for yourself. Because Atlas\r\nrequires authentication to deploy a newly build vagrant box, you must either:\r\n\r\n 1. Remove the final deployment step from the `ubuntu-12.04-amd64.json` template\r\n    file, or\r\n 2. Create your own free Atlas account at atlas.hashicorp.com, create a\r\n    new Packer project, and modify the template file to point to your now project.\r\n\r\n**To remove the deployment step** from the template file, delete _precisely_\r\nthese lines:\r\n\r\n```\r\n    },\r\n    {\r\n      \"type\": \"atlas\",\r\n      \"only\": [\"virtualbox-iso\"],\r\n      \"artifact\": \"stefco/geco-vm\",\r\n      \"artifact_type\": \"vagrant.box\",\r\n      \"metadata\": {\r\n        \"provider\": \"virtualbox\",\r\n        \"created_at\": \"{{timestamp}}\"\r\n      }\r\n```\r\n\r\n**To point to your newly created packer project**, modify _only_ the\r\n\"artifact\" line in the above code section, changing it from:\r\n\r\n```\r\n\"artifact\": \"stefco/geco-vm\",\r\n```\r\n\r\nto:\r\n\r\n```\r\n\"artifact\": \"your_atlas_username/your_packer_project_name\",\r\n```\r\n\r\nNow that that is finished, you can start running with\r\n\r\n```bash\r\npacker build ubuntu-12.04-amd64.json\r\n```\r\n\r\nand, after a considerable amount of time, you should have a fresh copy of\r\nthe vm ready to play with.\r\n\r\nOf course, you can modify it as you like, and\r\nif you add features that will be useful to others, I will happily incorporate\r\nthose changes into the base box.\r\n\r\n## Acknowledgements\r\n\r\n[This tutorial](http://kappataumu.com/articles/creating-an-Ubuntu-VM-with-packer.html)\r\nwas invaluable in getting going quickly with Packer. I also found\r\n[this](http://blog.endpoint.com/2014/03/provisioning-development-environment.html)\r\nhelpful. And, of course, Packer's own documentation is invaluable.\r\n\r\nAs far as provisioning LIGO tools, I drew inspiration from\r\n[DASWG](https://www.vagrantup.com/downloads.html)'s page, from scripts written\r\nby Szabi for provisioning his own Debian box, from conversations with people at\r\nthe observatories, and from the gwpy .travis.yml configuration scripts. There\r\nare also plenty of good [instructions](https://wiki.ligo.org/RemoteAccess/WebHome)\r\non various remote access topics on the LIGO wiki.\r\n\r\n## More information on Vagrant\r\n\r\n#### Creating a Default Vagrant File\r\n\r\nIf you want to start with Vagrant's default \"blank\" Vagrantfile, you can\r\ngenerate one by running `vagrant init stefco/geco-vm`. This creates a \r\nsimple Vagrantfile for this box, with some helpful comments on how you can\r\nmodify the file to your liking. There are a couple of features of the\r\ngeco_vm box that are specified in the repository Vagrantfile above, so you\r\nshould probably just go ahead and use that one.\r\n\r\nYou can read Vagrant's documentation on their\r\n[website](https://www.vagrantup.com) for more information.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}